// Code generated by protoc-gen-go. DO NOT EDIT.
// source: peer/query.proto

package peer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// ChaincodeQueryResponse returns information about each chaincode that pertains
// to a query in lscc.go, such as GetChaincodes (returns all chaincodes
// instantiated on a channel), and GetInstalledChaincodes (returns all chaincodes
// installed on a peer)
type ChaincodeQueryResponse struct {
	Chaincodes []*ChaincodeInfo `protobuf:"bytes,1,rep,name=chaincodes" json:"chaincodes,omitempty"`
}

func (m *ChaincodeQueryResponse) Reset()                    { *m = ChaincodeQueryResponse{} }
func (m *ChaincodeQueryResponse) String() string            { return proto.CompactTextString(m) }
func (*ChaincodeQueryResponse) ProtoMessage()               {}
func (*ChaincodeQueryResponse) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{0} }

func (m *ChaincodeQueryResponse) GetChaincodes() []*ChaincodeInfo {
	if m != nil {
		return m.Chaincodes
	}
	return nil
}

// ChaincodeInfo contains general information about an installed/instantiated
// chaincode
type ChaincodeInfo struct {
	Name    string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
	// the path as specified by the install/instantiate transaction
	Path string `protobuf:"bytes,3,opt,name=path" json:"path,omitempty"`
	// the chaincode function upon instantiation and its arguments. This will be
	// blank if the query is returning information about installed chaincodes.
	Input string `protobuf:"bytes,4,opt,name=input" json:"input,omitempty"`
	// the name of the ESCC for this chaincode. This will be
	// blank if the query is returning information about installed chaincodes.
	Escc string `protobuf:"bytes,5,opt,name=escc" json:"escc,omitempty"`
	// the name of the VSCC for this chaincode. This will be
	// blank if the query is returning information about installed chaincodes.
	Vscc string `protobuf:"bytes,6,opt,name=vscc" json:"vscc,omitempty"`
}

func (m *ChaincodeInfo) Reset()                    { *m = ChaincodeInfo{} }
func (m *ChaincodeInfo) String() string            { return proto.CompactTextString(m) }
func (*ChaincodeInfo) ProtoMessage()               {}
func (*ChaincodeInfo) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{1} }

func (m *ChaincodeInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ChaincodeInfo) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ChaincodeInfo) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *ChaincodeInfo) GetInput() string {
	if m != nil {
		return m.Input
	}
	return ""
}

func (m *ChaincodeInfo) GetEscc() string {
	if m != nil {
		return m.Escc
	}
	return ""
}

func (m *ChaincodeInfo) GetVscc() string {
	if m != nil {
		return m.Vscc
	}
	return ""
}

// ChannelQueryResponse returns information about each channel that pertains
// to a query in lscc.go, such as GetChannels (returns all channels for a
// given peer)
type ChannelQueryResponse struct {
	Channels []*ChannelInfo `protobuf:"bytes,1,rep,name=channels" json:"channels,omitempty"`
}

func (m *ChannelQueryResponse) Reset()                    { *m = ChannelQueryResponse{} }
func (m *ChannelQueryResponse) String() string            { return proto.CompactTextString(m) }
func (*ChannelQueryResponse) ProtoMessage()               {}
func (*ChannelQueryResponse) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{2} }

func (m *ChannelQueryResponse) GetChannels() []*ChannelInfo {
	if m != nil {
		return m.Channels
	}
	return nil
}

// ChannelInfo contains general information about channels
type ChannelInfo struct {
	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
}

func (m *ChannelInfo) Reset()                    { *m = ChannelInfo{} }
func (m *ChannelInfo) String() string            { return proto.CompactTextString(m) }
func (*ChannelInfo) ProtoMessage()               {}
func (*ChannelInfo) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{3} }

func (m *ChannelInfo) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func init() {
	proto.RegisterType((*ChaincodeQueryResponse)(nil), "protos.ChaincodeQueryResponse")
	proto.RegisterType((*ChaincodeInfo)(nil), "protos.ChaincodeInfo")
	proto.RegisterType((*ChannelQueryResponse)(nil), "protos.ChannelQueryResponse")
	proto.RegisterType((*ChannelInfo)(nil), "protos.ChannelInfo")
}

func init() { proto.RegisterFile("peer/query.proto", fileDescriptor9) }

var fileDescriptor9 = []byte{
	// 290 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0xcd, 0x4a, 0x33, 0x31,
	0x14, 0x86, 0x99, 0xaf, 0x3f, 0x9f, 0x3d, 0x45, 0x90, 0x58, 0x25, 0x1b, 0xa1, 0xcc, 0xc6, 0x2e,
	0x64, 0x02, 0x8a, 0x37, 0x60, 0x17, 0xd2, 0x85, 0x88, 0x5d, 0xba, 0x91, 0x34, 0x73, 0xda, 0x04,
	0xda, 0x24, 0x26, 0xd3, 0x4a, 0xaf, 0xc2, 0x5b, 0x96, 0x93, 0x74, 0x4a, 0xbb, 0x9a, 0x73, 0x9e,
	0xf7, 0x09, 0xc3, 0x9b, 0xc0, 0x95, 0x47, 0x0c, 0xe2, 0x7b, 0x8b, 0x61, 0x5f, 0xf9, 0xe0, 0x1a,
	0xc7, 0xfa, 0xe9, 0x13, 0xcb, 0x77, 0xb8, 0x9d, 0x6a, 0x69, 0xac, 0x72, 0x35, 0x7e, 0x50, 0x3e,
	0xc7, 0xe8, 0x9d, 0x8d, 0xc8, 0x9e, 0x01, 0x54, 0x9b, 0x44, 0x5e, 0x8c, 0x3b, 0x93, 0xe1, 0xe3,
	0x4d, 0x3e, 0x1d, 0xab, 0xe3, 0x99, 0x99, 0x5d, 0xba, 0xf9, 0x89, 0x58, 0xfe, 0x16, 0x70, 0x79,
	0x96, 0x32, 0x06, 0x5d, 0x2b, 0x37, 0xc8, 0x8b, 0x71, 0x31, 0x19, 0xcc, 0xd3, 0xcc, 0x38, 0xfc,
	0xdf, 0x61, 0x88, 0xc6, 0x59, 0xfe, 0x2f, 0xe1, 0x76, 0x25, 0xdb, 0xcb, 0x46, 0xf3, 0x4e, 0xb6,
	0x69, 0x66, 0x23, 0xe8, 0x19, 0xeb, 0xb7, 0x0d, 0xef, 0x26, 0x98, 0x17, 0x32, 0x31, 0x2a, 0xc5,
	0x7b, 0xd9, 0xa4, 0x99, 0xd8, 0x8e, 0x58, 0x3f, 0x33, 0x9a, 0xcb, 0x57, 0x18, 0x4d, 0xb5, 0xb4,
	0x16, 0xd7, 0xe7, 0x05, 0x05, 0x5c, 0xa8, 0xcc, 0xdb, 0x7a, 0xd7, 0x27, 0xf5, 0x88, 0xa7, 0x72,
	0x47, 0xa9, 0x7c, 0x80, 0xe1, 0x49, 0xc0, 0xee, 0xd2, 0x05, 0xd1, 0xfa, 0x65, 0xea, 0x43, 0xbb,
	0xc1, 0x81, 0xcc, 0xea, 0x97, 0x37, 0x28, 0x5d, 0x58, 0x55, 0x7a, 0xef, 0x31, 0xac, 0xb1, 0x5e,
	0x61, 0xa8, 0x96, 0x72, 0x11, 0x8c, 0x6a, 0x7f, 0x42, 0x6f, 0xf2, 0x79, 0xbf, 0x32, 0x8d, 0xde,
	0x2e, 0x2a, 0xe5, 0x36, 0xe2, 0x47, 0xcb, 0xc6, 0x44, 0xe7, 0xbc, 0xc8, 0xa2, 0xc8, 0xa2, 0x20,
	0x71, 0x91, 0x1f, 0xec, 0xe9, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x00, 0x84, 0x57, 0xd4, 0xcb, 0x01,
	0x00, 0x00,
}
